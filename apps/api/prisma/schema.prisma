generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid         String   @id @default(cuid())
  email       String?  @unique
  displayName String?
  slug        String?  @unique
  photoURL    String?
  isStudent   Boolean?
  collegeName String?

  refreshToken String?
  createdAt    DateTime @default(now())

  organizationMember OrganizationMember[]
  providerAccounts   Account[]

  registeredEventsId Events[]
}

model Account {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [uid])

  provider          String
  providerAccountId String

  providerAccessToken  String?
  providerRefreshToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId], name: "verify_provider_account")
}

model Organization {
  id   String @id @default(cuid())
  name String
  slug String @unique

  members   OrganizationMember[]
  invites   OrganizationInvite[]
  events    Events[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model OrganizationMember {
  id   String @id @default(cuid())
  role Role

  userUid String
  user    User   @relation(fields: [userUid], references: [uid])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userUid, organizationId])
}

model OrganizationInvite {
  id           String @id @default(cuid())
  inviteeEmail String
  inviteeRole  Role

  inviterUid     String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([inviteeEmail, organizationId])
}

model Events {
  id              String       @id @unique @default(dbgenerated("(gen_random_uuid())::text"))
  name            String
  website         String?
  location        String
  lastDate        DateTime?
  organizationId  String
  isPublished     Boolean      @default(false)
  description     Json?
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  registeredUsers User[]
  isTeamEvent     Boolean      @default(false)
  maxTeamSize     Int          @default(1)
  minTeamSize     Int          @default(1)
  isCollegeEvent  Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  maxTicketCount  Int?
  eventDate       DateTime?
  form            Field[]
  coverImage      String?
}

model Field {
  id String @id @default(cuid())

  label       String
  placeholder String?
  options     String?

  required Boolean @default(false)

  type FieldType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Events    Events?  @relation(fields: [eventsId], references: [id])
  eventsId  String?
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

enum FieldType {
  SingleLineText
  LongText
  SingleSelect
  MultiSelect
  Checkbox
  Number
  Email
  URL
  PhoneNumber
  Attachment
}
